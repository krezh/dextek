---
name: "Publish Schemas"

on:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"
  push:
    branches: ["main"]
    paths: [".github/workflows/publish-schemas.yaml"]

env:
  DEBCONF_NONINTERACTIVE_SEEN: "true"
  DEBIAN_FRONTEND: noninteractive
  APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE: DontWarn
  
permissions:
  packages: write

jobs:
  publish-manifests:
    name: Publish Manifests
    runs-on: ["dextek-runner"]
    steps:
      - name: Setup Tools
        shell: bash
        run: |
          sudo apt-get -qq update && \
          sudo apt-get -qq install --no-install-recommends -y curl

      - name: Setup Flux
        uses: fluxcd/flux2/action@896e0fa46d5107a05e953dd0a5261d78a145ec8c # v2.3.0

      - name: Setup Kube Tools
        uses: yokawasa/action-setup-kube-tools@5fe385031665158529decddddb51d6224422836e # v0.11.1
        with:
          setup-tools: kubectl

      - name: Setup Python
        uses: actions/setup-python@39cd14951b08e74b54015e9e001cdefcf80e669f # v5.1.1
        with:
          python-version: 3.x

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Write kubeconfig
        id: kubeconfig
        uses: timheuer/base64-to-file@adaa40c0c581f276132199d4cf60afa07ce60eac # v1.2
        with:
          encodedString: ${{ secrets.KUBECONFIG }}
          fileName: kubeconfig

      - name: Run crd-extractor
        env:
          KUBECONFIG: ${{ steps.kubeconfig.outputs.filePath }}
        run: |
          curl -fsSL https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/Utilities/crd-extractor.sh | bash
          ls $HOME/.datree/crdSchemas
          find $HOME/.datree/crdSchemas -name \*.json -exec cp {} . \;

      - name: Generate tag
        id: generate-tag
        shell: bash
        run: echo "tag=ghcr.io/${{ github.repository_owner }}/manifests/kubernetes-schemas:$(git rev-parse --short HEAD)" >> "${GITHUB_OUTPUT}"

      - name: Publish manifests
        shell: bash
        run: |
          flux push artifact oci://${{ steps.generate-tag.outputs.tag }} \
              --path="." \
              --source="${{ github.repositoryUrl }}" \
              --revision="${{ github.ref_name }}@sha1:$(git rev-parse HEAD)"

      - name: Tag manifests
        shell: bash
        run: flux tag artifact oci://${{ steps.generate-tag.outputs.tag }} --tag main

  publish-web:
    name: Publish Web
    runs-on: ubuntu-latest
    needs: ["publish-manifests"]
    steps:
      - name: Setup Flux
        uses: fluxcd/flux2/action@896e0fa46d5107a05e953dd0a5261d78a145ec8c # v2.3.0

      - name: Setup QEMU
        uses: docker/setup-qemu-action@5927c834f5b4fdf503fca6f4c7eccda82949e1ee # v3.1.0

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@aa33708b10e362ff993539393ff100fa93ed6a27 # v3.5.0

      - name: Login to GitHub Container Registry
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ghcr.io
          username: "${{ github.actor }}"
          password: "${{ secrets.GITHUB_TOKEN }}"

      - name: Pull manifests
        shell: bash
        run: |
          mkdir -p /home/runner/crdSchemas
          flux pull artifact oci://ghcr.io/${{ github.repository_owner }}/manifests/kubernetes-schemas:$(git rev-parse --short HEAD) --output /home/runner/crdSchemas

      - name: Write nginx-unprivileged Dockerfile
        shell: bash
        run: |
          cat <<EOF > /home/runner/crdSchemas/Dockerfile
          FROM ghcr.io/nginxinc/nginx-unprivileged:latest
          COPY --chown=nginx:nginx --chmod=755 . /usr/share/nginx/html
          USER nginx
          EOF

      - name: Publish web container
        uses: docker/build-push-action@5176d81f87c23d6fc96624dfdbcd9f3830bbe445 # v6.5.0
        with:
          context: /home/runner/crdSchemas
          platforms: linux/amd64,linux/arm64
          file: /home/runner/crdSchemas/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/kubernetes-schemas:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source="${{ github.repositoryUrl }}"
            org.opencontainers.image.authors="${{ github.repository_owner }} <${{ github.repository_owner }}@users.noreply.github.com>"
