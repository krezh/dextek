#!/usr/bin/env just --justfile

set quiet
set ignore-comments

CLUSTER_DIR := "."
BOOTSTRAP_DIR := CLUSTER_DIR + "/bootstrap"
KUBECONFIG := "$(pwd)/kubeconfig"
TALOSCONFIG := "$(pwd)/talosconfig"
TALOS_CONTROLLER := "$(talosctl config info --output json | jq --raw-output '.endpoints[]' | shuf -n 1)"

#TODO Change cluster name
CLUSTER_NAME := "plexuz"

_default:
  just --list

# Bootstrap all resources
all: && _cleanup
  just tofu
  just talosconfig
  just talos
  just kubeconfig
  just helmfile
  just wipe
  just k9s

tofu:
  #!/usr/bin/env bash
  set -euo pipefail
  cd "{{CLUSTER_DIR}}/terraform/talos"
  echo "Running Tofu..."
  tofu init --upgrade
  tofu apply --auto-approve --var talosconfig=true
  mkdir -p ~/.talos/configs
  cp talosconfig ~/.talos/configs/{{CLUSTER_NAME}}

talosconfig:
  #!/usr/bin/env bash
  set -euo pipefail
  talswitcher ctx talos-{{CLUSTER_NAME}}

talos:
  #!/usr/bin/env bash
  TALOS_CONTROLLER="{{TALOS_CONTROLLER}}"
  printf "Bootstrapping Node: $TALOS_CONTROLLER..."
  until talosctl --nodes $TALOS_CONTROLLER bootstrap > /dev/null 2>&1; do sleep 5; done
  echo " Done"

kubeconfig:
  printf "Getting kubeconfig..."
  until talosctl kubeconfig -n {{TALOS_CONTROLLER}} --force {{KUBECONFIG}} > /dev/null 2>&1; do sleep 3; done
  echo " Done"

helmfile:
  echo "Waiting for Nodes to be ready..."
  until kubectl --kubeconfig {{KUBECONFIG}} wait nodes --for=condition=Ready=False --all --timeout=10m > /dev/null 2>&1; do sleep 5; done
  printf "Deploying helmfile..."
  until helmfile --quiet --kubeconfig {{KUBECONFIG}} --file {{BOOTSTRAP_DIR}}/helmfile.yaml apply --skip-diff-on-install --suppress-diff; do sleep 3; done
  echo " Done"
  sops --decrypt {{BOOTSTRAP_DIR}}/flux/age-key.sops.yaml | kubectl apply --kubeconfig {{KUBECONFIG}} -f -
  sops --decrypt {{BOOTSTRAP_DIR}}/flux/github-deploy-key.sops.yaml | kubectl apply --kubeconfig {{KUBECONFIG}} -f -

wipe:
  #!/usr/bin/env bash
  NODES=$(talosctl config info --output json | jq --raw-output '.endpoints[]' | tr '\n' ' ' | awk '{$1=$1};1')
  echo "Wiping disks on Nodes: $NODES"
  for node in $NODES; do
    echo "Waiting for Node to be ready: $node"
    until talosctl health -n $node >/dev/null 2>&1; do sleep 3; done
    echo "Wiping disks on: $node"
    DISKS=$(talosctl get disks --output json -n $node | jq -r '. | select(.spec.dev_path | contains("nvme")) | .spec.dev_path' | sed 's|/dev/||g' | tr '\n' ' ' | awk '{$1=$1};1')
    for disk in $DISKS; do
      printf "Wiping: $disk"; sleep 1;
      if talosctl wipe disk $disk -n $node >/dev/null 2>&1; then
        echo " SUCCESS";
      else
        echo " FAILED (Probably OS Drive)";
      fi
    done;
  done

k9s:
  k9s --kubeconfig {{KUBECONFIG}} --all-namespaces --command pods

_cleanup:
  rm -f {{KUBECONFIG}}
