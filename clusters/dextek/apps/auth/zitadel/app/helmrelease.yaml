---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2beta2.json
apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: zitadel
  namespace: auth
spec:
  interval: 30m
  chart:
    spec:
      chart: zitadel
      version: 7.10.0
      sourceRef:
        kind: HelmRepository
        name: zitadel
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    podAnnotations:
      secret.reloader.stakater.com/reload: &secret zitadel-secret
    zitadel:
      # The ZITADEL config under configmapConfig is written to a Kubernetes ConfigMap
      # See all defaults here:
      # https://github.com/zitadel/zitadel/blob/main/cmd/defaults.yaml
      configmapConfig:
        Log:
          Level: info
          Formatter:
            Format: text
        Database:
          postgres:
            Host: postgres-rw.databases.svc.cluster.local
            Port: 5432
            Database: zitadel
            User:
              SSL:
                Mode: disable
            Admin:
              SSL:
                Mode: disable

        ExternalDomain: &host zitadel.plexuz.xyz
        # specifies if ZITADEL is exposed externally through TLS
        # this must be set to true even if TLS is not enabled on ZITADEL itself
        # but TLS traffic is terminated on a reverse proxy
        # !!! Changing this after initial setup breaks your system !!!
        ExternalSecure: true
        ExternalPort: 443
        TLS:
          # if enabled, ZITADEL will serve all traffic over TLS (HTTPS and gRPC)
          # you must then also provide a private key and certificate to be used for the connection
          # either directly or by a path to the corresponding file
          Enabled: false
        WebAuthNName: ZITADEL
        # The Secret containing the root CA Certificate at key ca.crt needed for establishing secure database connections
      dbSslRootCrtSecret:
      # The Secret containing the client CA Certificate and key at tls.crt and tls.key needed for establishing secure database connections
      dbSslClientCrtSecret:
      masterkeySecretName: *secret

    replicaCount: 3
    image:
      repository: ghcr.io/zitadel/zitadel
      tag: v2.48.1

    # Additional environment variables
    env:
      - name: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_DATABASE_POSTGRES_USER_USERNAME
      - name: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_DATABASE_POSTGRES_USER_PASSWORD
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_DATABASE_POSTGRES_ADMIN_USERNAME
      - name: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_DATABASE_POSTGRES_ADMIN_PASSWORD
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_USERNAME
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_PASSWORD
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_FIRSTNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_FIRSTNAME
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_LASTNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_LASTNAME
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_DISPLAYNAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_DISPLAYNAME
      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_EMAIL_ADDRESS
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_EMAIL_ADDRESS
      - name: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_HOST
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_HOST
      - name: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_USER
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_USER
      - name: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_PASSWORD
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_SMTPCONFIGURATION_SMTP_PASSWORD
      - name: ZITADEL_FIRSTINSTANCE_ORG_NAME
        valueFrom:
          secretKeyRef:
            name: *secret
            key: ZITADEL_FIRSTINSTANCE_ORG_NAME

      - name: ZITADEL_FIRSTINSTANCE_ORG_HUMAN_EMAIL_VERIFIED
        value: "true"
      - name: ZITADEL_DEFAULTINSTANCE_PASSWORDCOMPLEXITYPOLICY_MINLENGTH
        value: "8"
      - name: ZITADEL_DEFAULTINSTANCE_PASSWORDCOMPLEXITYPOLICY_HASLOWERCASE
        value: "true"
      - name: ZITADEL_DEFAULTINSTANCE_PASSWORDCOMPLEXITYPOLICY_HASUPPERCASE
        value: "true"
      - name: ZITADEL_DEFAULTINSTANCE_PASSWORDCOMPLEXITYPOLICY_HASNUMBER
        value: "true"
      - name: ZITADEL_DEFAULTINSTANCE_PASSWORDCOMPLEXITYPOLICY_HASSYMBOL
        value: "false"

    service:
      type: ClusterIP
      port: 8080
      protocol: http2
      annotations: {}

    ingress:
      enabled: true
      className: external
      annotations:
        external-dns.alpha.kubernetes.io/target: "ingress.plexuz.xyz"
      hosts:
        - host: *host
          paths:
            - path: /
              pathType: Prefix
      tls:
        - hosts:
            - *host

    initJob:
      # Once ZITADEL is installed, the initJob can be disabled.
      enabled: true

    readinessProbe:
      enabled: true
      initialDelaySeconds: 0
      periodSeconds: 5
      failureThreshold: 3

    livenessProbe:
      enabled: true
      initialDelaySeconds: 0
      periodSeconds: 5
      failureThreshold: 3

    startupProbe:
      enabled: true
      periodSeconds: 1
      failureThreshold: 30

    metrics:
      enabled: true
      serviceMonitor:
        # If true, the chart creates a ServiceMonitor that is compatible with Prometheus Operator
        # https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#monitoring.coreos.com/v1.ServiceMonitor.
        # The Prometheus community Helm chart installs this operator
        # https://github.com/prometheus-community/helm-charts/tree/main/charts/kube-prometheus-stack#kube-prometheus-stack
        enabled: true
