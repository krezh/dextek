---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app immich
  namespace: immich
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 4.0.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    defaultPodOptions:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44]
      automountServiceAccountToken: false
    controllers:
      server:
        type: deployment
        strategy: RollingUpdate
        replicas: 2
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/controller: server
        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.134.0
            envFrom: &envFrom
              - configMapRef:
                  name: immich-configmap
              - secretRef:
                  name: immich-secret
              - secretRef:
                  name: immich-postgres-secret
            env:
              IMMICH_WORKERS_INCLUDE: api
            resources:
              requests:
                cpu: 100m
                memory: 512M
              limits:
                memory: 1Gi
                gpu.intel.com/i915: 1
      ml:
        type: deployment
        strategy: RollingUpdate
        replicas: 2
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/controller: ml
        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-machine-learning
              tag: v1.134.0
            envFrom: *envFrom
            resources:
              requests:
                memory: 1Gi
              limits:
                memory: 4Gi
                gpu.intel.com/i915: 1
      micro:
        type: deployment
        strategy: RollingUpdate
        replicas: 2
        annotations:
          reloader.stakater.com/auto: "true"
        pod:
          topologySpreadConstraints:
            - maxSkew: 1
              topologyKey: kubernetes.io/hostname
              whenUnsatisfiable: DoNotSchedule
              labelSelector:
                matchLabels:
                  app.kubernetes.io/controller: micro
        containers:
          app:
            image:
              repository: ghcr.io/immich-app/immich-server
              tag: v1.134.0
            envFrom: *envFrom
            env:
              IMMICH_WORKERS_EXCLUDE: api
            resources:
              requests:
                memory: 512Mi
              limits:
                memory: 2Gi
                gpu.intel.com/i915: 1
    service:
      server:
        controller: server
        ports:
          http:
            port: &port 2283
      ml:
        controller: ml
        ports:
          http:
            port: 3003
    route:
      external:
        hostnames: ["photos.plexuz.xyz"]
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/name: "{{ .Release.Name | title }}"
          gethomepage.dev/instance: "krezh"
          gethomepage.dev/group: "Media"
          gethomepage.dev/icon: "{{ .Release.Name }}.png"
          gethomepage.dev/widget.url: "http://immich-server.{{ .Release.Namespace }}.svc.cluster.local:2283"
          gethomepage.dev/widget.type: "{{ .Release.Name }}"
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_IMMICH_APIKEY}}` }}"
          gethomepage.dev/widget.version: "2"
          gethomepage.dev/pod-selector: >-
            app.kubernetes.io/instance in (
              {{ .Release.Name }}
            )
        parentRefs:
          - name: gateway-external
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: immich-server
                port: *port
            timeouts:
              request: 0s
              backendRequest: 0s
      internal:
        hostnames: ["photos.talos.plexuz.xyz"]
        parentRefs:
          - name: gateway-internal
            namespace: network
            sectionName: https
        rules:
          - backendRefs:
              - name: immich-server
                port: *port
            timeouts:
              request: 0s
              backendRequest: 0s

    persistence:
      library:
        type: nfs
        server: 10.10.0.2
        path: /mnt/tank/media/immich
        globalMounts:
          - path: /usr/src/app/upload
      machine-learning-cache:
        type: persistentVolumeClaim
        storageClass: ceph-filesystem
        accessMode: ReadWriteMany
        size: 10Gi
        globalMounts:
          - path: /cache
            subPath: cache
          - path: /.cache
            subPath: dotCache
      geocoding-dump:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /usr/src/app/.reverse-geocoding-dump
      transformers-cache:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /usr/src/app/.transformers_cache
      geoname-dump:
        enabled: true
        type: emptyDir
        globalMounts:
          - path: /usr/src/app/node_modules/local-reverse-geocoder/geonames_dump
